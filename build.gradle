plugins {
    id 'org.springframework.boot' version '2.7.12'
    id 'io.spring.dependency-management' version '1.1.0'
}

allprojects {
    group 'com.brian'

    repositories {
        mavenCentral()
        jcenter()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'

    jar {
        enabled = false
    }

    configurations {
        all {
            // 모듈 변경 라이브러리 버전(SNAPSHOT) 캐쉬 없음
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        }
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-jdbc'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'
        implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

        implementation 'org.apache.commons:commons-lang3'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        // @ConfigurationProperties를 사용하기 위한 의존성
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        runtimeOnly 'com.h2database:h2'
        testRuntimeOnly 'com.h2database:h2'
    }

    //https://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html#configuration-metadata.annotation-processor.configuring
    compileJava.inputs.files(processResources)

    test {
        useJUnitPlatform()
    }

    clean.doLast {
        // clean-up directory when necessary
        file("$projectDir/src/main/generated/").deleteDir()
        file("$projectDir/src/test/generated_tests/").deleteDir()
        // IntelliJ IDEA 용
        file("$projectDir/out").deleteDir()
    }
}
